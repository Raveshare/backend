generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model assets {
  id         Int      @id @default(autoincrement())
  tags       String[] @db.VarChar(255)
  type       String?  @db.VarChar(255)
  author     String?  @db.VarChar(255)
  image      String?  @db.VarChar(255)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  dimensions Int[]
  campaign   String?  @db.VarChar(255)
  featured   Boolean? @default(false)
  wallet     String?  @db.VarChar(255)
}

model canvases {
  id                         Int                       @id @default(autoincrement())
  data                       Json
  params                     Json?
  isPublic                   Boolean                   @default(false)
  ipfsLink                   String[]                  @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  imageLink                  String[]                  @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  createdAt                  DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                  @updatedAt @db.Timestamptz(6)
  ownerAddress               String?                   @db.VarChar(255)
  referredFrom               String[]                  @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  isGated                    Boolean?                  @default(false)
  allowList                  String[]                  @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  gatedWith                  String[]                  @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  assetsRecipientElementData Json[]                    @default([])
  tags                       String[]                  @default([]) @db.VarChar(255)
  ownerId                    Int
  owner                      owners                    @relation(fields: [ownerId], references: [id])
  user_published_canvases    user_published_canvases[]
}

model collections {
  id          Int        @id @default(autoincrement())
  address     String     @db.VarChar(255)
  name        String     @db.VarChar(255)
  openseaLink String     @db.VarChar(255)
  image       String     @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @db.Timestamptz(6)
  contents    contents[]
}

model contents {
  id           Int          @id @default(autoincrement())
  tokenId      String       @db.VarChar(255)
  title        String       @db.VarChar(255)
  description  String       @db.VarChar(255)
  edition      String?      @db.VarChar(255)
  ipfsLink     String       @db.VarChar(255)
  imageURL     String       @db.VarChar(255)
  openseaLink  String       @db.VarChar(255)
  createdAt    DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime     @updatedAt @db.Timestamptz(6)
  collectionId Int?
  collections  collections? @relation(fields: [collectionId], references: [id])
}

model nftData {
  id           Int      @id @default(autoincrement())
  tokenId      String   @db.VarChar(255)
  title        String   @db.VarChar(255)
  description  String
  openseaLink  String   @db.VarChar(510)
  imageURL     String?  @db.VarChar(510)
  permaLink    String?  @db.VarChar(510)
  isPublic     Boolean  @default(false)
  address      String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)
  ownerAddress String?  @db.VarChar(255)
  chainId      Int?
  dimensions   Int[]
  creators     Json[]   @default([])
  ownerId      Int
  owner        owners   @relation(fields: [ownerId], references: [id])
}

model owners {
  mail                    String?                   @db.VarChar(255)
  farcaster_signer_uuid   String?                   @db.VarChar(255)
  farcaster_id            String?                   @db.VarChar(255)
  lens_auth_token         Json?
  twitter_auth_token      Json?
  lens_handle             String?                   @db.VarChar(255)
  followNftAddress        String?                   @db.VarChar(255)
  profileId               String?                   @db.VarChar(255)
  createdAt               DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime                  @updatedAt @db.Timestamptz(6)
  solana_address          String?                   @unique @db.VarChar(255)
  evm_address             String?                   @unique @db.VarChar(255)
  points                  Int                       @default(0)
  id                      Int                       @id @default(autoincrement())
  canvases                canvases[]
  nftData                 nftData[]
  username                String?                   @unique @db.VarChar(255)
  public_canvas_templates public_canvas_templates[]
  uploadeds               uploadeds[]
  points_history          points_history[]
  socials                 socials[]
  referral                referral[]
  user_published_canvases user_published_canvases[]
  room                    room[]
  participants            room_participants[]
}

model socials {
  id               Int      @id @default(autoincrement())
  ownerId          Int
  lens_auth_token  Json?
  lens_handle      String?  @db.VarChar(255)
  followNftAddress String?  @db.VarChar(255)
  profileId        String?  @db.VarChar(255)
  farcaster        Json?
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)
  owner            owners   @relation(fields: [ownerId], references: [id])
}

model templates {
  id        Int      @id @default(autoincrement())
  data      Json     @db.Json
  name      String   @db.VarChar(255)
  image     String   @db.VarChar(255)
  tags      String[] @default([]) @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model uploadeds {
  id        Int      @id @default(autoincrement())
  image     String   @db.VarChar(255)
  ownerId   Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  owner     owners   @relation(fields: [ownerId], references: [id])
}

model user_collected_posts {
  id      Int    @id @default(autoincrement())
  address String @db.VarChar(255)
  postId  String @db.VarChar(255)
}

model tasks {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String           @db.VarChar(255)
  amount         Int              @default(0)
  campaign       String?          @db.VarChar(255)
  locked         Boolean?         @default(true)
  tag            String?          @db.VarChar(255)
  groupId        String?          @db.VarChar(255)
  taskIdInGroup  Int?             @default(0)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6)
  points_history points_history[]
}

model points_history {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  amount    Int      @default(0)
  taskId    Int?
  reason    String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  owner     owners   @relation(fields: [ownerId], references: [id])
  task      tasks?   @relation(fields: [taskId], references: [id])
}

model room {
  id           Int                 @id @default(autoincrement())
  name         String              @db.VarChar(255)
  createdAt    DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime            @updatedAt @db.Timestamptz(6)
  host         owners?             @relation(fields: [hostId], references: [id])
  hostId       Int?
  participants room_participants[]
}

model room_participants {
  id            Int     @id @default(autoincrement())
  participant   owners? @relation(fields: [participantId], references: [id])
  roomId        Int?
  participantId Int?
  room          room?   @relation(fields: [roomId], references: [id])
}

view public_canvas_templates {
  id                         Int      @id @default(autoincrement())
  data                       Json
  params                     Json?
  isPublic                   Boolean  @default(false)
  ipfsLink                   String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  imageLink                  String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  createdAt                  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime @updatedAt @db.Timestamptz(6)
  ownerAddress               String?  @db.VarChar(255)
  referredFrom               String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  isGated                    Boolean? @default(false)
  allowList                  String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  gatedWith                  String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @db.VarChar(255)
  assetsRecipientElementData Json[]   @default([])
  tags                       String[] @default([]) @db.VarChar(255)
  ownerId                    Int
  owner                      owners   @relation(fields: [ownerId], references: [id])
}

model referral {
  id Int @id @default(autoincrement())

  ownerId      Int
  referralCode String  @unique
  referred     String? @db.VarChar(255)
  hasClaimed   Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  owner     owners   @relation(fields: [ownerId], references: [id])
}

model user_published_canvases {
  id          Int       @id @default(autoincrement())
  canvasId    Int?
  ownerId     Int?
  platform    String    @db.VarChar(255)
  xChain      String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  scheduledAt DateTime? @db.Timestamptz(6)
  txHash      String?   @db.VarChar(255)
  metadata    Json?     @db.Json

  owner  owners?   @relation(fields: [ownerId], references: [id])
  canvas canvases? @relation(fields: [canvasId], references: [id])
}

view template_view {
  id        Int       @unique
  data      Json?     @db.Json
  name      String?   @db.VarChar(255)
  image     String?   @db.VarChar(255)
  tags      String[]  @default([]) @db.VarChar(255)
  createdAt DateTime? @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
}
